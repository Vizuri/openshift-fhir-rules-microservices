apiVersion: v1
kind: Template
metadata:
  name: business-central-pipeline
parameters:
- name: APP_NAME
  description: The name assigned to all of the application objects defined in this template.
  displayName: Application Name
  required: true
- name: GIT_SOURCE_URL
  description: The source URL for the application
  displayName: Source URL
  required: true
- name: GIT_SOURCE_REF
  description: The source Ref for the application
  displayName: Source Ref
  required: true
  value: develop
- name: GIT_SOURCE_SECRET
  description: The source Secret for the application
  displayName: Source Secret
  required: true
- description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
  required: true
- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
  required: true
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec: {}
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${NAME}", "namespace": "", "kind": "DeploymentConfig"}]'
    creationTimestamp: null
    labels:
      name: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    source:
      type: "Git"
      git:
        uri: ${GIT_SOURCE_URL}
        ref: ${GIT_SOURCE_REF}
      sourceSecret:
        name: ${GIT_SOURCE_SECRET}
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
             timeout(time: 20, unit: 'MINUTES') {
                def appName="${APP_NAME}"
                def project=""

                node {
                  stage("Initialize") {
                    project = env.PROJECT_NAME
                  }
                  stage("Checkout") {
                    //git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}, credentialsId: ${GIT_SOURCE_SECRET}"
                  }
                }

                node {
                  stage("Build Image") {
                    sh "oc start-build ${appName}-docker -n ${project}"
                    openshiftVerifyBuild bldCfg: "${appName}-docker", namespace: project, waitTime: '20', waitUnit: 'min'
                  }
                }
             }
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
             throw err
          }
      type: JenkinsPipeline
    triggers:
    - github:
        secret: "${GITHUB_WEBHOOK_SECRET}"
      type: GitHub
    - generic:
        secret: "${GENERIC_WEBHOOK_SECRET}"
      type: Generic
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_NAME}-docker
    name: ${APP_NAME}-docker
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: "Git"
      git:
        uri: ${GIT_SOURCE_URL}
        ref: ${GIT_SOURCE_REF}
      sourceSecret:
        name: ${GIT_SOURCE_SECRET}
    strategy:
      dockerStrategy:
        dockerfilePath: Dockerfile
      type: Docker
    triggers: {}
