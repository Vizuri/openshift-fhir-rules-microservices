apiVersion: v1
kind: Template
metadata:
  name: springboot-pipeline
parameters:
- name: APP_NAME
  description: The name assigned to all of the application objects defined in this template.
  displayName: Application Name
  required: true
- description: The exposed hostname that will route to the service, if left blank a value will be defaulted
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
- name: GIT_SOURCE_URL
  description: The source URL for the application
  displayName: Source URL
  required: true
- name: GIT_SOURCE_REF
  description: The source Ref for the application
  displayName: Source Ref
  required: true
  value: develop
- name: CONTEXT_DIR
  description: Path within Git project to build; empty for root project directory.
  displayName: Context Directory
  required: false
- description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
  required: true
- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
  required: true
- description: The exposed hostname that will route to the service, if left blank a value will be defaulted
  displayName: Application Hostname
  name: JAVA_OPTS
  value: "-Xms256m -Xmx256m"
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec: {}
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${NAME}", "namespace": "", "kind": "DeploymentConfig"}]'
    creationTimestamp: null
    labels:
      name: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    source:
      type: "Git"
      git:
        uri: ${GIT_SOURCE_URL}
        ref: ${GIT_SOURCE_REF}
      contextDir: ${CONTEXT_DIR}
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
             timeout(time: 20, unit: 'MINUTES') {
                def appName="${APP_NAME}"
                def project=""
                node("maven") {
                  stage("Initialize") {
                    project = env.PROJECT_NAME
                  }
                  stage("Checkout") {
                    git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}", credentialsId: "fhir-development-${GIT_SOURCE_SECRET}"
                  }
                  stage("Build Jar") {
                    sh "cd ${CONTEXT_DIR}"
                    sh "mvn -s configuration/settings.xml -DskipTests=true clean install"
                    sh "cp target/*.jar ${APP_NAME}.jar"
                    stash name:"jar", includes:" ${APP_NAME}.jar"
                  }
                }
                node {
                  stage("Build Image") {
                    unstash name:"jar"
                    sh "oc start-build ${appName}-docker --from-file=${APP_NAME}.jar"
                    openshiftVerifyBuild bldCfg: "${appName}-docker", waitTime: '20', waitUnit: 'min'
                  }
                  stage("Deploy") {
                    openshiftDeploy(deploymentConfig: '${APP_NAME}')
                  }
                }
             }
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
             throw err
          }
      type: JenkinsPipeline
    triggers:
    - github:
        secret: "${GITHUB_WEBHOOK_SECRET}"
      type: GitHub
    - generic:
        secret: "${GENERIC_WEBHOOK_SECRET}"
      type: Generic
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_NAME}-docker
    name: ${APP_NAME}-docker
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      dockerfile: |-
        FROM fhir-base-container:latest
        COPY  ${APP_NAME}.jar /home/jboss
        ENV JAVA_OPTS=""
        ENV APP_JAR=${APP_NAME}.jar
      binary:
        asFile: ${APP_NAME}.jar
      type: Docker
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: fhir-base-container:latest
      type: Docker
    triggers: {}
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    host: ${APPLICATION_DOMAIN}
    port:
      targetPort: web
    to:
      kind: Service
      name: ${APP_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${APP_NAME}
  spec:
    portalIP: ""
    ports:
    - name: web
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: ${APP_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    name: "${APP_NAME}"
  spec:
    replicas: 1
    strategy:
      type: "Recreate"
      resources:
        limits:
          cpu: "500m"
          memory: "256Mi"
    template:
      metadata:
        labels:
          name: "${APP_NAME}"
          deploymentconfig: "${APP_NAME}"
      spec:
        containers:
        - args:
          env:
          - name: MONGO_DATABASE_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fhirdb
                key: database-admin-password
          - name: MONGO_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fhirdb
                key: database-password
          - name: MONGO_DATABASE_USER
            valueFrom:
              secretKeyRef:
               name: fhirdb
               key: database-user
          - name: MONGO_DATABASE_HOST
            value: fhirdb
          - name: MONGO_DATABASE_PORT
            value: '27017'
          - name: JAVA_OPTS
            value: '${JAVA_OPTS}'
          image: ' '
          imagePullPolicy: "Always"
          name: "${APP_NAME}"
          readinessProbe:
          livenessProbe:
          ports:
          - name: web
            containerPort: 8080
            protocol: TCP
          - name: jolokia
            containerPort: 8778
            protocol: TCP
          resources: {}
          securityContext:
          terminationMessagePath: "/dev/termination-log"
          volumeMounts:
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APP_NAME}
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      type: ImageChange
