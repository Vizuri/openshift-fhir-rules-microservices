apiVersion: v1
kind: Template
labels:
  template: sso71-mysql-persistent
  xpaas: 1.4.0
message: 'A new persistent SSO service (using MySQL) has been created in your project.
  The admin username/password for accessing the master realm via the SSO console is
  ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing
  the MySQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be
  sure to create the "${SERVICE_ACCOUNT_NAME}" service account and the following secrets:
  "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure
  content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE}
  file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing
  the ${SSO_TRUSTSTORE} file used for securing SSO requests.'
metadata:
  annotations:
    description: Application template for SSO 7.1 MySQL applications with persistent
      storage
    iconClass: icon-jboss
    openshift.io/display-name: Red Hat Single Sign-On 7.1 + MySQL (Persistent)
    tags: sso,keycloak,jboss,xpaas
    version: 1.0.0
  creationTimestamp: 2017-09-21T18:21:54Z
  name: sso71-mysql-persistent
  resourceVersion: "54363"
  uid: beeb0d3b-9ef9-11e7-9a4e-16289a159cd8
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The web server's http port.
      service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql",
        "kind": "Service"}]'
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: ${APPLICATION_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The web server's https port.
      service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql",
        "kind": "Service"}]'
    labels:
      application: ${APPLICATION_NAME}
    name: secure-${APPLICATION_NAME}
  spec:
    ports:
    - port: 8443
      targetPort: 8443
    selector:
      deploymentConfig: ${APPLICATION_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The database server's port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-mysql
  spec:
    ports:
    - port: 3306
      targetPort: 3306
    selector:
      deploymentConfig: ${APPLICATION_NAME}-mysql
- apiVersion: v1
  id: ${APPLICATION_NAME}-http
  kind: Route
  metadata:
    annotations:
      description: Route for application's http service.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    host: ${HOSTNAME_HTTP}
    to:
      name: ${APPLICATION_NAME}
- apiVersion: v1
  id: ${APPLICATION_NAME}-https
  kind: Route
  metadata:
    annotations:
      description: Route for application's https service.
    labels:
      application: ${APPLICATION_NAME}
    name: secure-${APPLICATION_NAME}
  spec:
    host: ${HOSTNAME_HTTPS}
    tls:
      termination: passthrough
    to:
      name: secure-${APPLICATION_NAME}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    paused: true
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}
        name: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: DB_SERVICE_PREFIX_MAPPING
            value: ${APPLICATION_NAME}-mysql=DB
          - name: DB_JNDI
            value: ${DB_JNDI}
          - name: DB_USERNAME
            value: ${DB_USERNAME}
          - name: DB_PASSWORD
            value: ${DB_PASSWORD}
          - name: DB_DATABASE
            value: ${DB_DATABASE}
          - name: TX_DATABASE_PREFIX_MAPPING
            value: ${APPLICATION_NAME}-mysql=DB
          - name: DB_MIN_POOL_SIZE
            value: ${DB_MIN_POOL_SIZE}
          - name: DB_MAX_POOL_SIZE
            value: ${DB_MAX_POOL_SIZE}
          - name: DB_TX_ISOLATION
            value: ${DB_TX_ISOLATION}
          - name: OPENSHIFT_KUBE_PING_LABELS
            value: application=${APPLICATION_NAME}
          - name: OPENSHIFT_KUBE_PING_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: HTTPS_KEYSTORE_DIR
            value: /etc/eap-secret-volume
          - name: HTTPS_KEYSTORE
            value: ${HTTPS_KEYSTORE}
          - name: HTTPS_KEYSTORE_TYPE
            value: ${HTTPS_KEYSTORE_TYPE}
          - name: HTTPS_NAME
            value: ${HTTPS_NAME}
          - name: HTTPS_PASSWORD
            value: ${HTTPS_PASSWORD}
          - name: JGROUPS_ENCRYPT_SECRET
            value: ${JGROUPS_ENCRYPT_SECRET}
          - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
            value: /etc/jgroups-encrypt-secret-volume
          - name: JGROUPS_ENCRYPT_KEYSTORE
            value: ${JGROUPS_ENCRYPT_KEYSTORE}
          - name: JGROUPS_ENCRYPT_NAME
            value: ${JGROUPS_ENCRYPT_NAME}
          - name: JGROUPS_ENCRYPT_PASSWORD
            value: ${JGROUPS_ENCRYPT_PASSWORD}
          - name: JGROUPS_CLUSTER_PASSWORD
            value: ${JGROUPS_CLUSTER_PASSWORD}
          - name: SSO_ADMIN_USERNAME
            value: ${SSO_ADMIN_USERNAME}
          - name: SSO_ADMIN_PASSWORD
            value: ${SSO_ADMIN_PASSWORD}
          - name: SSO_REALM
            value: ${SSO_REALM}
          - name: SSO_SERVICE_USERNAME
            value: ${SSO_SERVICE_USERNAME}
          - name: SSO_SERVICE_PASSWORD
            value: ${SSO_SERVICE_PASSWORD}
          - name: SSO_TRUSTSTORE
            value: ${SSO_TRUSTSTORE}
          - name: SSO_TRUSTSTORE_DIR
            value: /etc/sso-secret-volume
          - name: SSO_TRUSTSTORE_PASSWORD
            value: ${SSO_TRUSTSTORE_PASSWORD}
          image: ${APPLICATION_NAME}
          imagePullPolicy: Always
          resources:
            limits:
              cpu: '1000m'
              memory: 2Gi
            requests:
              cpu: '50m'
              memory: 500Mi
          lifecycle:
            preStop:
              exec:
                command:
                - /opt/eap/bin/jboss-cli.sh
                - -c
                - :shutdown(timeout=60)
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/eap/bin/livenessProbe.sh
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8443
            name: https
            protocol: TCP
          - containerPort: 8888
            name: ping
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/eap/bin/readinessProbe.sh
          volumeMounts:
          - mountPath: /etc/eap-secret-volume
            name: eap-keystore-volume
            readOnly: true
          - mountPath: /etc/jgroups-encrypt-secret-volume
            name: eap-jgroups-keystore-volume
            readOnly: true
          - mountPath: /etc/sso-secret-volume
            name: sso-truststore-volume
            readOnly: true
          - mountPath: /opt/eap/standalone/configuration/standalone_xml_history
            name: standalone-xml-history
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        terminationGracePeriodSeconds: 75
        volumes:
        - name: eap-keystore-volume
          secret:
            secretName: ${HTTPS_SECRET}
        - name: eap-jgroups-keystore-volume
          secret:
            secretName: ${JGROUPS_ENCRYPT_SECRET}
        - name: sso-truststore-volume
          secret:
            secretName: ${SSO_TRUSTSTORE_SECRET}
        - name: standalone-xml-history
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-standalone-xml-history
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: redhat-sso71-openshift:1.2-7
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-mysql
  spec:
    paused: true
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}-mysql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}-mysql
        name: ${APPLICATION_NAME}-mysql
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            value: ${DB_USERNAME}
          - name: MYSQL_PASSWORD
            value: ${DB_PASSWORD}
          - name: MYSQL_DATABASE
            value: ${DB_DATABASE}
          - name: MYSQL_LOWER_CASE_TABLE_NAMES
            value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
          - name: MYSQL_MAX_CONNECTIONS
            value: ${MYSQL_MAX_CONNECTIONS}
          - name: MYSQL_FT_MIN_WORD_LEN
            value: ${MYSQL_FT_MIN_WORD_LEN}
          - name: MYSQL_FT_MAX_WORD_LEN
            value: ${MYSQL_FT_MAX_WORD_LEN}
          - name: MYSQL_AIO
            value: ${MYSQL_AIO}
          image: mysql
          imagePullPolicy: Always
          resources:
            limits:
              cpu: '1000m'
              memory: 2Gi
            requests:
              cpu: '50m'
              memory: 250Mi
          name: ${APPLICATION_NAME}-mysql
          ports:
          - containerPort: 3306
            protocol: TCP
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: ${APPLICATION_NAME}-mysql-pvol
        terminationGracePeriodSeconds: 60
        volumes:
        - name: ${APPLICATION_NAME}-mysql-pvol
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-mysql-claim
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-mysql
        from:
          kind: ImageStreamTag
          name: mysql:${MYSQL_IMAGE_STREAM_TAG}
          # JA Bride: hard-coding to openshift namespace as mysql comes out of the box in that namespace even with oc cluster up
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-mysql-claim
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-standalone-xml-history
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
parameters:
- description: The name for the application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: sso
- description: 'Custom hostname for http service route.  Leave blank for default hostname,
    e.g.: <application-name>.<project>.<default-domain-suffix>'
  displayName: Custom http Route Hostname
  name: HOSTNAME_HTTP
- description: 'Custom hostname for https service route.  Leave blank for default
    hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
  displayName: Custom https Route Hostname
  name: HOSTNAME_HTTPS
- description: Database JNDI name used by application to resolve the datasource, e.g.
    java:/jboss/datasources/mysql
  displayName: Database JNDI Name
  name: DB_JNDI
  value: java:jboss/datasources/KeycloakDS
- description: Database name
  displayName: Database Name
  name: DB_DATABASE
  required: true
  value: root
- description: The name of the service account to use for the deployment.  The service
    account should be configured to allow useage of the secret(s) specified by HTTPS_SECRET
    and JGROUPS_ENCRYPT_SECRET.
  displayName: Service Account Name
  name: SERVICE_ACCOUNT_NAME
  required: true
  value: sso-service-account
- description: The name of the secret containing the keystore file
  displayName: Server Keystore Secret Name
  name: HTTPS_SECRET
  value: sso-app-secret
- description: The name of the keystore file within the secret
  displayName: Server Keystore Filename
  name: HTTPS_KEYSTORE
  value: keystore.jks
- description: The type of the keystore file (JKS or JCEKS)
  displayName: Server Keystore Type
  name: HTTPS_KEYSTORE_TYPE
- description: The name associated with the server certificate (e.g. jboss)
  displayName: Server Certificate Name
  name: HTTPS_NAME
- description: The password for the keystore and certificate (e.g. mykeystorepass)
  displayName: Server Keystore Password
  name: HTTPS_PASSWORD
- description: Sets xa-pool/min-pool-size for the configured datasource.
  displayName: Datasource Minimum Pool Size
  name: DB_MIN_POOL_SIZE
- description: Sets xa-pool/max-pool-size for the configured datasource.
  displayName: Datasource Maximum Pool Size
  name: DB_MAX_POOL_SIZE
- description: Sets transaction-isolation for the configured datasource.
  displayName: Datasource Transaction Isolation
  name: DB_TX_ISOLATION
- description: Sets how the table names are stored and compared.
  displayName: MySQL Lower Case Table Names
  name: MYSQL_LOWER_CASE_TABLE_NAMES
- description: The maximum permitted number of simultaneous client connections.
  displayName: MySQL Maximum number of connections
  name: MYSQL_MAX_CONNECTIONS
- description: The minimum length of the word to be included in a FULLTEXT index.
  displayName: MySQL FullText Minimum Word Length
  name: MYSQL_FT_MIN_WORD_LEN
- description: The maximum length of the word to be included in a FULLTEXT index.
  displayName: MySQL FullText Maximum Word Length
  name: MYSQL_FT_MAX_WORD_LEN
- description: Controls the innodb_use_native_aio setting value if the native AIO
    is broken.
  displayName: MySQL AIO
  name: MYSQL_AIO
- description: Database user name
  displayName: Database Username
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: DB_USERNAME
  required: true
- description: Database user password
  displayName: Database Password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: DB_PASSWORD
  required: true
- description: Size of persistent storage for database volume.
  displayName: Database Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 512Mi
- description: The name of the secret containing the keystore file
  displayName: JGroups Secret Name
  name: JGROUPS_ENCRYPT_SECRET
  value: sso-app-secret
- description: The name of the keystore file within the secret
  displayName: JGroups Keystore Filename
  name: JGROUPS_ENCRYPT_KEYSTORE
  value: jgroups.jceks
- description: The name associated with the server certificate (e.g. secret-key)
  displayName: JGroups Certificate Name
  name: JGROUPS_ENCRYPT_NAME
- description: The password for the keystore and certificate (e.g. password)
  displayName: JGroups Keystore Password
  name: JGROUPS_ENCRYPT_PASSWORD
- description: JGroups cluster password
  displayName: JGroups Cluster Password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: JGROUPS_CLUSTER_PASSWORD
  required: true
- description: Namespace in which the ImageStreams for Red Hat Middleware images are
    installed. These ImageStreams are normally installed in the openshift namespace.
    You should only need to modify this if you've installed the ImageStreams in a
    different namespace/project.
  displayName: ImageStream Namespace
  name: IMAGE_STREAM_NAMESPACE
  required: true
  value: openshift
- description: SSO Server admin username
  displayName: SSO Admin Username
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: SSO_ADMIN_USERNAME
  required: true
- description: SSO Server admin  password
  displayName: SSO Admin Password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: SSO_ADMIN_PASSWORD
  required: true
- description: Realm to be created in the SSO server (e.g. demo).
  displayName: SSO Realm
  name: SSO_REALM
- description: The username used to access the SSO service.  This is used by clients
    to create the appliction client(s) within the specified SSO realm.
  displayName: SSO Service Username
  name: SSO_SERVICE_USERNAME
- description: The password for the SSO service user.
  displayName: SSO Service Password
  name: SSO_SERVICE_PASSWORD
- description: The name of the truststore file within the secret (e.g. truststore.jks)
  displayName: SSO Trust Store
  name: SSO_TRUSTSTORE
- description: The password for the truststore and certificate (e.g. mykeystorepass)
  displayName: SSO Trust Store Password
  name: SSO_TRUSTSTORE_PASSWORD
- description: The name of the secret containing the truststore file (e.g. truststore-secret).
    Used for volume secretName
  displayName: SSO Trust Store Secret
  name: SSO_TRUSTSTORE_SECRET
  value: sso-app-secret
- description: The tag to use for the "mysql" image stream.  Typically, this aligns
    with the major.minor version of MySQL.
  displayName: MySQL Image Stream Tag
  name: MYSQL_IMAGE_STREAM_TAG
  required: true
  value: "5.7"
