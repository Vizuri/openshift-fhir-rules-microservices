#!/usr/bin/groovy
@Library('github.com/vizuri/openshift-pipeline-templates@master')
def utils = new com.vizuri.openshift.Utils();
utils.helloWorld();

println ">>>> Starting";
//utils.addAnnotationToBuild('fabric8.io/foo', 'bar')

println ">>>>>  Build Number ${BUILD_NUMBER}";
def ocp_project;
def image_project;
def app_name="patient-service";
def image_tag="v1.${BUILD_NUMBER}";
   
def snapshot_release_number = "1.0-SNAPSHOT";
def release_number;
def staging_build_job="fhir-staging/fhir-patient-service-staging";

echo ">>>>>>  Branch Name: " + BRANCH_NAME;
   
   
if(BRANCH_NAME.startsWith("release")) {
   //def (branch_name, branch_release_number) = BRANCH_NAME.tokenize( '/' )
   def tokens = BRANCH_NAME.tokenize( '/' )
   branch_name = tokens[0]
   branch_release_number = tokens[1]
   
   image_project="fhir"
   ocp_project="fhir-test"
   
   release_number = branch_release_number
   
   stage('Confirm Deploy?') {
       milestone 1
           input message: "Do you want to deploy release ${BRANCH_NAME} to test?" 
	   }
}
else {
   release_number = snapshot_release_number
   image_project="fhir-snapshot"
   ocp_project="fhir-development"
}

node('maven') {	
   stage('Checkout') {
        echo "In checkout" 
    	checkout scm
   }
    stage('MavenBuild') {
        echo "In Build"
        sh "mvn -s configuration/settings.xml -Dbuild.number=${release_number} -f fhir-patient-service clean install deploy"
        junit 'fhir-patient-service/target/surefire-reports/*.xml'

        
       // step([$class: 'XUnitBuilder',
    	//	thresholds: [[$class: 'FailedThreshold', unstableThreshold: '1']],
    	//	tools: [[$class: 'JUnitType', pattern: 'target/surefire-reports/*.xml']]])
        
        stash includes: 'fhir-patient-service/target/*.jar', name: 'artifacts'
        stash includes: 'fhir-patient-service/Dockerfile', name: 'docker'
       // stash includes: 'fhir-patient-service/**', name: 'project-stash'
    }

/*	
	stage('SonarQube analysis') {
		//unstash "project-stash"
		
	  def pom = readMavenPom file: 'fhir-patient-service/pom.xml'
	  writeFile encoding: 'UTF-8', file: 'sonar-project.properties', text: """
	  sonar.projectBaseDir=fhir-patient-service
      sonar.projectKey=$pom.groupId:$pom.artifactId
      sonar.projectName=$pom.name
      sonar.projectVersion=$pom.version
	  sonar.java.binaries=target/classes
	  sonar.tests=target/jacoco.exec
      sonar.sources=src/main/java"""
		archive 'sonar-project.properties'
  
		def scannerHome = tool 'sonar';
		
		withSonarQubeEnv('sonar') {
		  sh "${scannerHome}/bin/sonar-scanner"
		}
		
	  }
	  
	  
  	stage("Quality Gate"){
  		timeout(time: 1, unit: 'HOURS') {
  			def qg = waitForQualityGate()
  			if (qg.status != 'OK') {
  				error "Pipeline aborted due to quality gate failure: ${qg.status}"
  			}
  		}
  	}
*/	  
	  
		  
  }
  
  
  
  
  
  node () {
      stage('DockerBuild') {
//          dir('.') {
//              deleteDir()
//          }
//          checkout scm
//          echo "Checkout Done"
          unstash 'artifacts'
		  unstash 'docker'
		  openshift.withCluster( 'mycluster' ) {
        	 openshift.withProject( 'fhir-development' ) {
              def build = openshift.newBuild("fhir-patient-service", "--strategy=docker --name=fhir-patient-service")  
              //def build = openshift.startBuild("fhir-patient-service", "--from-file=fhir-patient-service/target/fhir-patient-service-0.0.1-SNAPSHOT.jar")  
            }
          }     	  
                   
//		  docker.build('fhir/fhir-patient-service', "fhir-patient-service")
		  
//		  docker.withRegistry('https://505576296154.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:ecr-credentials') {
//			  docker.image('fhir/fhir-patient-service').push('1.0')
//			}
		  
		  
//		  withAWS(credentials:'AWS') {
			  // do something
//				  def login = ecrLogin()
//				  sh """ 
//				    ${login}
//				  	cd fhir-patient-service
//				  	docker build -t 505576296154.dkr.ecr.us-east-1.amazonaws.com/fhir/fhir-patient-service:1.0 .
//				    docker push 505576296154.dkr.ecr.us-east-1.amazonaws.com/fhir/fhir-patient-service:1.0
//				  """
//		  }

      }
	  
	  stage('Deploy Dev') {
		 // openshift.withCluster( 'ocplocal' ) {
		  openshift.withCluster( 'https://webconsole.openshift-web-console.svc', 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJjaWNkIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImNpY2QtdG9rZW4ta2Y2Zm0iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiY2ljZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijg5OTBjYzU4LTlhNjMtMTFlOC04MmYyLTEyNzk3NzdlYmU0MiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpjaWNkOmNpY2QifQ.KaMFkaTBG1d4rcJTDw5d3q6BCQK4IFum_kgDDnxoU0MMfCjoIjc6x359iPWqJS-at3GmHEzT--lnqiVNdxVjCSeXT7KVCEnmU8g14dNSkaRhF8TNBseN2wtwm1oSxD-3xQfUUld7U7OXcvo32nmhwKe7JLpuXJVN6kHM5gGk26wKIpYe188nMf_BTq2_gyRZxaS8VP3erF3r6g_OuDsD_vQGyowjcGx6LUWkghI-YCDUrcuqaXwexwgSIlS4fnX0s4vNA3zjlNDxXnmqfO_TZytFSO_MdnYlaYuOdrD0ZrZ8iAs-FvDNFFV4lsIt-OsOx__5anAwvdSiyBFdcUbz3Q' ) {
			  openshift.withProject( 'fhir-development' ) {
				  openshift.selector( 'deploymentconfig/fhir-patient-service' ).describe()
				  def app = openshift.newApp( '--file=https://raw.githubusercontent.com/Vizuri/openshift-fhir-rules-microservices/master/openshift/templates/springboot-dc.yaml -p APP_NAME=fhir-patient-service -p IMAGE_NAME=505576296154.dkr.ecr.us-east-1.amazonaws.com/fhir/fhir-patient-service:1.0 -e SPRING_PROFILES_ACTIVE=openshift' )
			  }
		  }
		  
	  }
  }
  //sudo docker login docker.demo.vizuri.com -u admin -p demopass34
  //sudo docker build -t docker.demo.vizuri.com/${image_project}/${app_name}:${release_number} .
  //sudo docker push docker.demo.vizuri.com/${image_project}/${app_name}:${release_number}"""

  
  
  
  //node () {
  //    stage('DockerBuild') {
  //        dir('.') {
  //            deleteDir()
  //        }
  //        checkout scm
  //        echo "Checkout Done"
  //        unstash 'artifacts'
  //        sh """
//            sudo docker login docker.demo.vizuri.com -u admin -p demopass34 
//            sudo docker build -t docker.demo.vizuri.com/${image_project}/${app_name}:${release_number} .
//            sudo docker push docker.demo.vizuri.com/${image_project}/${app_name}:${release_number}"""
  //    }
//}



//node ('fhir-jenkins-slave') { 
//    stage('OpenShiftDeploy') {
//        sh """
//            oc project ${ocp_project}
//            oc tag -n ${ocp_project} docker.demo.vizuri.com/${image_project}/${app_name}:${release_number} ${app_name}:latest --insecure=true
//            """
//            //oc deploy ${app_name} --latest -n fhir-development"""
//    }
//}

//node () {
//   if(BRANCH_NAME.startsWith("release")) {
//	stage ('DeployToStaging?') {
//	     input message: "Do you want to deploy release ${release_number} to staging?" 
//	     build job: staging_build_job, wait: false, parameters: [[$class: 'StringParameterValue', name: 'release_number', value: release_number]]
//	}
//  }
//}


//} catch (exc) {
       // hipchatSend (color: 'RED', notify: true,
       //     message: "Version :: " + version + " FAILED: Job '${env.JOB_NAME} BUILD: [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
        //)
//}
