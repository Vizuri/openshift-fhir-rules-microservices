#!/usr/bin/groovy
@Library('github.com/vizuri/openshift-pipeline-templates@master')
def utils = new com.vizuri.openshift.Utils();
utils.helloWorld();

println ">>>> Starting";
//utils.addAnnotationToBuild('fabric8.io/foo', 'bar')

println ">>>>>  Build Number ${BUILD_NUMBER}";
def ocp_project;
def image_project;
def app_name="patient-service";
def image_tag="v1.${BUILD_NUMBER}";
   
def snapshot_release_number = "1.0-SNAPSHOT";
def release_number;
def staging_build_job="fhir-staging/fhir-patient-service-staging";

echo ">>>>>>  Branch Name: " + BRANCH_NAME;
   
   
if(BRANCH_NAME.startsWith("release")) {
   //def (branch_name, branch_release_number) = BRANCH_NAME.tokenize( '/' )
   def tokens = BRANCH_NAME.tokenize( '/' )
   branch_name = tokens[0]
   branch_release_number = tokens[1]
   
   image_project="fhir"
   ocp_project="fhir-test"
   
   release_number = branch_release_number
   
   stage('Confirm Deploy?') {
       milestone 1
           input message: "Do you want to deploy release ${BRANCH_NAME} to test?" 
	   }
}
else {
   release_number = snapshot_release_number
   image_project="fhir-snapshot"
   ocp_project="fhir-development"
}

node('maven') {	
   stage('Checkout') {
        echo "In checkout" 
    	checkout scm
   }
    stage('MavenBuild') {
        echo "In Build"
        sh "mvn -s configuration/settings.xml -Dbuild.number=${release_number} -f fhir-patient-service clean install deploy"
        junit 'fhir-patient-service/target/surefire-reports/*.xml'
        
       // step([$class: 'XUnitBuilder',
    	//	thresholds: [[$class: 'FailedThreshold', unstableThreshold: '1']],
    	//	tools: [[$class: 'JUnitType', pattern: 'target/surefire-reports/*.xml']]])
        
        //stash includes: 'fhir-patient-service/target/*.jar', name: 'artifacts'
    }
	
	//sonar.genericcoverage.reportPaths=fhir-patient-service/target/surefire-reports
	
    stage('SonarQube analysis') {
      def pom = readMavenPom file: 'fhir-patient-service/pom.xml'
      writeFile encoding: 'UTF-8', file: 'sonar-project.properties', text: """
      sonar.projectKey=$pom.groupId:$pom.artifactId
      sonar.projectName=$pom.name
      sonar.projectVersion=$pom.version
	  sonar.java.binaries=fhir-patient-service/target/classes
	  sonar.tests=fhir-patient-service/target/jacoco.exec
      sonar.sources=fhir-patient-service/src/main/java"""
      archive 'sonar-project.properties'

	  def scannerHome = tool 'sonar';
	  
      withSonarQubeEnv('sonar') {
        sh "${scannerHome}/bin/sonar-scanner"
      }
//	  sh "env"
//	  echo "sonarProps: " + sonarProps
//	  def ceTaskUrl = 'ceTaskUrl'
//	  sonarProps.split('\n').each { line ->
//		  if (line.startsWith(ceTaskUrl)) {
//			   env.SONAR_CE_TASK_URL = line.substring(ceTaskUrl.length() + 1)
//			   echo "env.SONAR_CE_TASK_URL: " + env.SONAR_CE_TASK_URL
//		  }
//		  
//		  if (line.startsWith('serverUrl')) {
//			   def sonarServerUrl = line.split('=')[1]
//			   if (!sonarServerUrl.endsWith('/')) {
//					sonarServerUrl += '/'
//			   }
//
//			   env.SONAR_SERVER_URL = sonarServerUrl
//			   echo "env.SONAR_SERVER_URL: " + env.SONAR_SERVER_URL
//		  }
//	  }
    }
	
	
//	stage("Quality Gate"){
//		timeout(time: 1, unit: 'HOURS') {
//			def qg = waitForQualityGate()
//			if (qg.status != 'OK') {
//				error "Pipeline aborted due to quality gate failure: ${qg.status}"
//			}
//		}
//	}
	
	
	
	stage("Quality Gate") {
		 script {
				while(true){
					sh "sleep 2"
					//def url="http://jenkins:8080/job/${env.JOB_NAME.replaceAll('/','/job/')}/lastBuild/consoleText";
					//def sonarId = sh script: "wget -qO- --content-on-error --no-proxy --auth-no-challenge --http-user=${CRED_USR} --http-password=${CRED_PSW} '${url}'  | grep 'More about the report processing' | head -n1 ",returnStdout:true
					//sonarId = sonarId.substring(sonarId.indexOf("=")+1)
					def fileContents = readFile file: '.scannerwork/report-task.txt'
					//String fileContents = new File('.scannerwork/report-task.txt').getText('UTF-8')
					def ceTaskId = ( fileContents =~ "ceTaskId=(.*)")[0][1]
					
					sh "wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 -o jq;chmod +x jq"
			
					echo "sonarId ${ceTaskId}"
					def sonarUrl = "http://sonarqube:9000/sonar/api/ce/task?id=${ceTaskId}"
					def sonarStatus = sh script: "wget -qO- '${sonarUrl}' --no-proxy --content-on-error | ./jq -r '.task' | ./jq -r '.status' ",returnStdout:true
					echo "Sonar status ... ${sonarStatus}"
					if(sonarStatus.trim() == "SUCCESS"){
						echo "BREAK";
						break;
					}
					if(sonarStatus.trim() == "FAILED "){
						echo "FAILED"
						currentBuild.result = 'FAILED'
						break;
					}
				}
			}
		}
		
		
		
//    stage("Quality Gate") {
//      steps {
//        timeout(time: 1, unit: 'HOURS') {
//           // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
//           // true = set pipeline to UNSTABLE, false = don't
//           // Requires SonarQube Scanner for Jenkins 2.7+
//	       waitForQualityGate abortPipeline: true
//        }
//      }
//    }
}
//node () { 
//    stage('DockerBuild') {
//        dir('.') {
//            deleteDir()
//        }
//        checkout scm
//        echo "Checkout Done"
//        unstash 'artifacts'
//        sh """
//            sudo docker login docker.demo.vizuri.com -u admin -p demopass34 
//            sudo docker build -t docker.demo.vizuri.com/${image_project}/${app_name}:${release_number} .
//            sudo docker push docker.demo.vizuri.com/${image_project}/${app_name}:${release_number}"""
//    }
//}

//node ('fhir-jenkins-slave') { 
//    stage('OpenShiftDeploy') {
//        sh """
//            oc project ${ocp_project}
//            oc tag -n ${ocp_project} docker.demo.vizuri.com/${image_project}/${app_name}:${release_number} ${app_name}:latest --insecure=true
//            """
//            //oc deploy ${app_name} --latest -n fhir-development"""
//    }
//}

//node () {
//   if(BRANCH_NAME.startsWith("release")) {
//	stage ('DeployToStaging?') {
//	     input message: "Do you want to deploy release ${release_number} to staging?" 
//	     build job: staging_build_job, wait: false, parameters: [[$class: 'StringParameterValue', name: 'release_number', value: release_number]]
//	}
//  }
//}


//} catch (exc) {
       // hipchatSend (color: 'RED', notify: true,
       //     message: "Version :: " + version + " FAILED: Job '${env.JOB_NAME} BUILD: [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
        //)
//}
